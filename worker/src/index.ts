/**
 * Welcome to Cloudflare Workers!
 *
 * - Run `npm run dev` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `npm run deploy` to publish your worker
 *
 * Bind resources to your worker in `wrangler.jsonc`. After adding bindings, a type definition for the
 * `Env` object can be regenerated with `npm run cf-typegen`.
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

// The `Env` interface will be automatically generated by `npx wrangler types`
// and made available globally based on your wrangler.jsonc `vars`.
// You no longer need to define it manually here if it only contains bindings/vars.
// However, if you have complex types within Env that are not simple bindings,
// you might still define parts of it or extend the generated one.
// For this specific case, wrangler types will generate:
// interface Env {
//   ACCOUNT_ID: string; // Note: ACCOUNT_ID is in wrangler.jsonc but not used by the current API call
//   API_TOKEN: string;
//   TURN_CREDENTIAL_TTL_SECONDS?: string;
//   CF_TURN_TOKEN_ID: string;
// }

// Define the structure for individual ICE servers (STUN or TURN)
interface IceServerDetail {
	urls: string[];
	username?: string; // Present for TURN servers
	credential?: string; // Present for TURN servers, replaces 'password'
}

// Define the structure of the expected API response from Cloudflare
// This covers both a successful response with iceServers,
// and a potential API-level error response (e.g., if success: false).
interface CloudflareIceServerApiResponse {
	iceServers?: IceServerDetail[]; // Present on successful data retrieval
	success?: boolean; // May be present in API-level errors (e.g., false)
	errors?: { code: number; message: string }[]; // Present with API-level errors
	messages?: { code: number; message: string }[]; // Optional messages with API-level errors
}

const corsHeaders = {
	"Access-Control-Allow-Origin": "*",
	"Access-Control-Allow-Methods": "GET, OPTIONS",
	"Access-Control-Allow-Headers": "Content-Type, Authorization",
};

// The `Request` type will be globally available from the generated types.
function handleOptions(request: Request) {
	if (
		request.headers.get("Origin") !== null &&
		request.headers.get("Access-Control-Request-Method") !== null &&
		request.headers.get("Access-Control-Request-Headers") !== null
	) {
		return new Response(null, {
			headers: corsHeaders,
		});
	}

	return new Response(null, {
		headers: {
			Allow: "GET, OPTIONS",
		},
	});
}

// The `ExportedHandler`, `Request`, `Env`, `ExecutionContext`, and `Response` types
// will be globally available from the types generated by `npx wrangler types`.
const handler: ExportedHandler<Env> = {
	async fetch(
		request: Request,
		env: Env,
		ctx: ExecutionContext,
	): Promise<Response> {
		const url = new URL(request.url);

		if (url.pathname === "/favicon.ico") {
			return new Response(null, { status: 204, headers: corsHeaders }); // No Content for favicon
		}

		if (url.pathname !== "/") {
			return new Response("Not Found", { status: 404, headers: corsHeaders });
		}

		if (request.method === "OPTIONS") {
			return handleOptions(request);
		}

		if (request.method !== "GET") {
			return new Response("Method Not Allowed", {
				status: 405,
				headers: { ...corsHeaders, Allow: "GET, OPTIONS" },
			});
		}

		// Updated check: ACCOUNT_ID is not used by this specific API endpoint.
		if (!env.CF_API_TOKEN || !env.CF_TURN_TOKEN_ID) {
			console.error(
				"CF_API_TOKEN or CF_TURN_TOKEN_ID not configured in worker environment.",
			);
			return new Response(
				JSON.stringify({ error: "Server configuration error." }),
				{
					status: 500,
					headers: { ...corsHeaders, "Content-Type": "application/json" },
				},
			);
		}

		const apiUrl = `https://rtc.live.cloudflare.com/v1/turn/keys/${env.CF_TURN_TOKEN_ID}/credentials/generate-ice-servers`;
		const ttlSeconds = Number.parseInt(
			env.TURN_CREDENTIAL_TTL_SECONDS || "3600",
			10,
		);

		const apiRequestOptions = {
			method: "POST",
			headers: {
				Authorization: `Bearer ${env.CF_API_TOKEN}`, // API_TOKEN is a secret, accessed via env
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ ttl: ttlSeconds }),
		};

		try {
			const cfApiResponse = await fetch(apiUrl, apiRequestOptions);

			if (!cfApiResponse.ok) {
				const errorText = await cfApiResponse.text();
				console.error(
					`Cloudflare API error: ${cfApiResponse.status} ${cfApiResponse.statusText}`,
					errorText,
				);
				return new Response(
					JSON.stringify({
						error: "Failed to fetch TURN credentials from Cloudflare API.",
						details: errorText,
					}),
					{
						status: 502,
						headers: { ...corsHeaders, "Content-Type": "application/json" },
					},
				);
			}

			const data = await cfApiResponse.json<CloudflareIceServerApiResponse>();

			// Check for a successful response structure first (contains iceServers array)
			if (data.iceServers && Array.isArray(data.iceServers)) {
				// Return the object containing the iceServers array, as per user's sample output
				return new Response(JSON.stringify({ iceServers: data.iceServers }), {
					status: 200,
					headers: { ...corsHeaders, "Content-Type": "application/json" },
				});
			}
			if (data.success === false) {
				// Handle API-level errors (e.g., { success: false, errors: [...] })
				console.error(
					"Cloudflare API reported an error. Full response:",
					JSON.stringify(data, null, 2),
				);
				return new Response(
					JSON.stringify({
						error: "Cloudflare API reported an error.",
						details:
							data.errors ||
							data.messages ||
							"No error details provided by API.",
					}),
					{
						status: 502, // Bad Gateway, as the upstream API had an issue
						headers: { ...corsHeaders, "Content-Type": "application/json" },
					},
				);
			}
			// The response is not in any expected format
			console.error(
				"Cloudflare API returned an unexpected response structure. Full response:",
				JSON.stringify(data, null, 2),
			);
			return new Response(
				JSON.stringify({
					error: "Unexpected response structure from Cloudflare API.",
					details: "The API response was not in the expected format.",
				}),
				{
					status: 502,
					headers: { ...corsHeaders, "Content-Type": "application/json" },
				},
			);
		} catch (error) {
			console.error("Error fetching TURN credentials:", error);
			const errorMessage =
				error instanceof Error
					? error.message
					: "An unexpected error occurred.";
			return new Response(
				JSON.stringify({
					error: "Failed to process request for TURN credentials.",
					details: errorMessage,
				}),
				{
					status: 500,
					headers: { ...corsHeaders, "Content-Type": "application/json" },
				},
			);
		}
	},
};

export default handler;
